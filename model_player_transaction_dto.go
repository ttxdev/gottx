/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PlayerTransactionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerTransactionDto{}

// PlayerTransactionDto struct for PlayerTransactionDto
type PlayerTransactionDto struct {
	Id int32 `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Quantity int32 `json:"quantity"`
	Value int64 `json:"value"`
	Action TransactionAction `json:"action"`
	CreatorId int32 `json:"creator_id"`
	PlayerId int32 `json:"player_id"`
	Creator CreatorPartialDto `json:"creator"`
}

type _PlayerTransactionDto PlayerTransactionDto

// NewPlayerTransactionDto instantiates a new PlayerTransactionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerTransactionDto(id int32, createdAt time.Time, updatedAt time.Time, quantity int32, value int64, action TransactionAction, creatorId int32, playerId int32, creator CreatorPartialDto) *PlayerTransactionDto {
	this := PlayerTransactionDto{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Quantity = quantity
	this.Value = value
	this.Action = action
	this.CreatorId = creatorId
	this.PlayerId = playerId
	this.Creator = creator
	return &this
}

// NewPlayerTransactionDtoWithDefaults instantiates a new PlayerTransactionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerTransactionDtoWithDefaults() *PlayerTransactionDto {
	this := PlayerTransactionDto{}
	return &this
}

// GetId returns the Id field value
func (o *PlayerTransactionDto) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PlayerTransactionDto) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PlayerTransactionDto) SetId(v int32) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PlayerTransactionDto) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PlayerTransactionDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PlayerTransactionDto) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PlayerTransactionDto) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PlayerTransactionDto) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PlayerTransactionDto) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetQuantity returns the Quantity field value
func (o *PlayerTransactionDto) GetQuantity() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value
// and a boolean to check if the value has been set.
func (o *PlayerTransactionDto) GetQuantityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quantity, true
}

// SetQuantity sets field value
func (o *PlayerTransactionDto) SetQuantity(v int32) {
	o.Quantity = v
}

// GetValue returns the Value field value
func (o *PlayerTransactionDto) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PlayerTransactionDto) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PlayerTransactionDto) SetValue(v int64) {
	o.Value = v
}

// GetAction returns the Action field value
func (o *PlayerTransactionDto) GetAction() TransactionAction {
	if o == nil {
		var ret TransactionAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PlayerTransactionDto) GetActionOk() (*TransactionAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *PlayerTransactionDto) SetAction(v TransactionAction) {
	o.Action = v
}

// GetCreatorId returns the CreatorId field value
func (o *PlayerTransactionDto) GetCreatorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *PlayerTransactionDto) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *PlayerTransactionDto) SetCreatorId(v int32) {
	o.CreatorId = v
}

// GetPlayerId returns the PlayerId field value
func (o *PlayerTransactionDto) GetPlayerId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlayerId
}

// GetPlayerIdOk returns a tuple with the PlayerId field value
// and a boolean to check if the value has been set.
func (o *PlayerTransactionDto) GetPlayerIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayerId, true
}

// SetPlayerId sets field value
func (o *PlayerTransactionDto) SetPlayerId(v int32) {
	o.PlayerId = v
}

// GetCreator returns the Creator field value
func (o *PlayerTransactionDto) GetCreator() CreatorPartialDto {
	if o == nil {
		var ret CreatorPartialDto
		return ret
	}

	return o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value
// and a boolean to check if the value has been set.
func (o *PlayerTransactionDto) GetCreatorOk() (*CreatorPartialDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Creator, true
}

// SetCreator sets field value
func (o *PlayerTransactionDto) SetCreator(v CreatorPartialDto) {
	o.Creator = v
}

func (o PlayerTransactionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerTransactionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["quantity"] = o.Quantity
	toSerialize["value"] = o.Value
	toSerialize["action"] = o.Action
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["player_id"] = o.PlayerId
	toSerialize["creator"] = o.Creator
	return toSerialize, nil
}

func (o *PlayerTransactionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"quantity",
		"value",
		"action",
		"creator_id",
		"player_id",
		"creator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlayerTransactionDto := _PlayerTransactionDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlayerTransactionDto)

	if err != nil {
		return err
	}

	*o = PlayerTransactionDto(varPlayerTransactionDto)

	return err
}

type NullablePlayerTransactionDto struct {
	value *PlayerTransactionDto
	isSet bool
}

func (v NullablePlayerTransactionDto) Get() *PlayerTransactionDto {
	return v.value
}

func (v *NullablePlayerTransactionDto) Set(val *PlayerTransactionDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerTransactionDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerTransactionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerTransactionDto(val *PlayerTransactionDto) *NullablePlayerTransactionDto {
	return &NullablePlayerTransactionDto{value: val, isSet: true}
}

func (v NullablePlayerTransactionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerTransactionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


