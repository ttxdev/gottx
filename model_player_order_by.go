/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"fmt"
)

// PlayerOrderBy the model 'PlayerOrderBy'
type PlayerOrderBy string

// List of PlayerOrderBy
const (
	NAME PlayerOrderBy = "Name"
	CREDITS PlayerOrderBy = "Credits"
	PORTFOLIO PlayerOrderBy = "Portfolio"
)

// All allowed values of PlayerOrderBy enum
var AllowedPlayerOrderByEnumValues = []PlayerOrderBy{
	"Name",
	"Credits",
	"Portfolio",
}

func (v *PlayerOrderBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlayerOrderBy(value)
	for _, existing := range AllowedPlayerOrderByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlayerOrderBy", value)
}

// NewPlayerOrderByFromValue returns a pointer to a valid PlayerOrderBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlayerOrderByFromValue(v string) (*PlayerOrderBy, error) {
	ev := PlayerOrderBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlayerOrderBy: valid values are %v", v, AllowedPlayerOrderByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlayerOrderBy) IsValid() bool {
	for _, existing := range AllowedPlayerOrderByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlayerOrderBy value
func (v PlayerOrderBy) Ptr() *PlayerOrderBy {
	return &v
}

type NullablePlayerOrderBy struct {
	value *PlayerOrderBy
	isSet bool
}

func (v NullablePlayerOrderBy) Get() *PlayerOrderBy {
	return v.value
}

func (v *NullablePlayerOrderBy) Set(val *PlayerOrderBy) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerOrderBy) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerOrderBy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerOrderBy(val *PlayerOrderBy) *NullablePlayerOrderBy {
	return &NullablePlayerOrderBy{value: val, isSet: true}
}

func (v NullablePlayerOrderBy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerOrderBy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

