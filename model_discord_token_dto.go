/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DiscordTokenDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiscordTokenDto{}

// DiscordTokenDto struct for DiscordTokenDto
type DiscordTokenDto struct {
	AccessToken string `json:"access_token"`
	LinkToken string `json:"link_token"`
	TwitchUsers []TwitchUserDto `json:"twitch_users"`
}

type _DiscordTokenDto DiscordTokenDto

// NewDiscordTokenDto instantiates a new DiscordTokenDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiscordTokenDto(accessToken string, linkToken string, twitchUsers []TwitchUserDto) *DiscordTokenDto {
	this := DiscordTokenDto{}
	this.AccessToken = accessToken
	this.LinkToken = linkToken
	this.TwitchUsers = twitchUsers
	return &this
}

// NewDiscordTokenDtoWithDefaults instantiates a new DiscordTokenDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiscordTokenDtoWithDefaults() *DiscordTokenDto {
	this := DiscordTokenDto{}
	return &this
}

// GetAccessToken returns the AccessToken field value
func (o *DiscordTokenDto) GetAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessToken
}

// GetAccessTokenOk returns a tuple with the AccessToken field value
// and a boolean to check if the value has been set.
func (o *DiscordTokenDto) GetAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessToken, true
}

// SetAccessToken sets field value
func (o *DiscordTokenDto) SetAccessToken(v string) {
	o.AccessToken = v
}

// GetLinkToken returns the LinkToken field value
func (o *DiscordTokenDto) GetLinkToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkToken
}

// GetLinkTokenOk returns a tuple with the LinkToken field value
// and a boolean to check if the value has been set.
func (o *DiscordTokenDto) GetLinkTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkToken, true
}

// SetLinkToken sets field value
func (o *DiscordTokenDto) SetLinkToken(v string) {
	o.LinkToken = v
}

// GetTwitchUsers returns the TwitchUsers field value
func (o *DiscordTokenDto) GetTwitchUsers() []TwitchUserDto {
	if o == nil {
		var ret []TwitchUserDto
		return ret
	}

	return o.TwitchUsers
}

// GetTwitchUsersOk returns a tuple with the TwitchUsers field value
// and a boolean to check if the value has been set.
func (o *DiscordTokenDto) GetTwitchUsersOk() ([]TwitchUserDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.TwitchUsers, true
}

// SetTwitchUsers sets field value
func (o *DiscordTokenDto) SetTwitchUsers(v []TwitchUserDto) {
	o.TwitchUsers = v
}

func (o DiscordTokenDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiscordTokenDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["access_token"] = o.AccessToken
	toSerialize["link_token"] = o.LinkToken
	toSerialize["twitch_users"] = o.TwitchUsers
	return toSerialize, nil
}

func (o *DiscordTokenDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"access_token",
		"link_token",
		"twitch_users",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiscordTokenDto := _DiscordTokenDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiscordTokenDto)

	if err != nil {
		return err
	}

	*o = DiscordTokenDto(varDiscordTokenDto)

	return err
}

type NullableDiscordTokenDto struct {
	value *DiscordTokenDto
	isSet bool
}

func (v NullableDiscordTokenDto) Get() *DiscordTokenDto {
	return v.value
}

func (v *NullableDiscordTokenDto) Set(val *DiscordTokenDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscordTokenDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscordTokenDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscordTokenDto(val *DiscordTokenDto) *NullableDiscordTokenDto {
	return &NullableDiscordTokenDto{value: val, isSet: true}
}

func (v NullableDiscordTokenDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscordTokenDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


