/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"fmt"
)

// TransactionAction the model 'TransactionAction'
type TransactionAction string

// List of TransactionAction
const (
	TRANSACTIONACTION_BUY TransactionAction = "Buy"
	TRANSACTIONACTION_SELL TransactionAction = "Sell"
	TRANSACTIONACTION_OPEN TransactionAction = "Open"
)

// All allowed values of TransactionAction enum
var AllowedTransactionActionEnumValues = []TransactionAction{
	"Buy",
	"Sell",
	"Open",
}

func (v *TransactionAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransactionAction(value)
	for _, existing := range AllowedTransactionActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransactionAction", value)
}

// NewTransactionActionFromValue returns a pointer to a valid TransactionAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionActionFromValue(v string) (*TransactionAction, error) {
	ev := TransactionAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransactionAction: valid values are %v", v, AllowedTransactionActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionAction) IsValid() bool {
	for _, existing := range AllowedTransactionActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransactionAction value
func (v TransactionAction) Ptr() *TransactionAction {
	return &v
}

type NullableTransactionAction struct {
	value *TransactionAction
	isSet bool
}

func (v NullableTransactionAction) Get() *TransactionAction {
	return v.value
}

func (v *NullableTransactionAction) Set(val *TransactionAction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionAction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionAction(val *TransactionAction) *NullableTransactionAction {
	return &NullableTransactionAction{value: val, isSet: true}
}

func (v NullableTransactionAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

