/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the VoteDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VoteDto{}

// VoteDto struct for VoteDto
type VoteDto struct {
	CreatorId int32 `json:"creator_id"`
	Value int64 `json:"value"`
	Time time.Time `json:"time"`
}

type _VoteDto VoteDto

// NewVoteDto instantiates a new VoteDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVoteDto(creatorId int32, value int64, time time.Time) *VoteDto {
	this := VoteDto{}
	this.CreatorId = creatorId
	this.Value = value
	this.Time = time
	return &this
}

// NewVoteDtoWithDefaults instantiates a new VoteDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVoteDtoWithDefaults() *VoteDto {
	this := VoteDto{}
	return &this
}

// GetCreatorId returns the CreatorId field value
func (o *VoteDto) GetCreatorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value
// and a boolean to check if the value has been set.
func (o *VoteDto) GetCreatorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatorId, true
}

// SetCreatorId sets field value
func (o *VoteDto) SetCreatorId(v int32) {
	o.CreatorId = v
}

// GetValue returns the Value field value
func (o *VoteDto) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *VoteDto) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *VoteDto) SetValue(v int64) {
	o.Value = v
}

// GetTime returns the Time field value
func (o *VoteDto) GetTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *VoteDto) GetTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *VoteDto) SetTime(v time.Time) {
	o.Time = v
}

func (o VoteDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VoteDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["creator_id"] = o.CreatorId
	toSerialize["value"] = o.Value
	toSerialize["time"] = o.Time
	return toSerialize, nil
}

func (o *VoteDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"creator_id",
		"value",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVoteDto := _VoteDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVoteDto)

	if err != nil {
		return err
	}

	*o = VoteDto(varVoteDto)

	return err
}

type NullableVoteDto struct {
	value *VoteDto
	isSet bool
}

func (v NullableVoteDto) Get() *VoteDto {
	return v.value
}

func (v *NullableVoteDto) Set(val *VoteDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVoteDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVoteDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVoteDto(val *VoteDto) *NullableVoteDto {
	return &NullableVoteDto{value: val, isSet: true}
}

func (v NullableVoteDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVoteDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


