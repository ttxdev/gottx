/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the LootBoxDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LootBoxDto{}

// LootBoxDto struct for LootBoxDto
type LootBoxDto struct {
	Id int32 `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	IsOpen bool `json:"is_open"`
	Result CreatorPartialDto `json:"result"`
	Player PlayerPartialDto `json:"player"`
}

type _LootBoxDto LootBoxDto

// NewLootBoxDto instantiates a new LootBoxDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLootBoxDto(id int32, createdAt time.Time, updatedAt time.Time, isOpen bool, result CreatorPartialDto, player PlayerPartialDto) *LootBoxDto {
	this := LootBoxDto{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.IsOpen = isOpen
	this.Result = result
	this.Player = player
	return &this
}

// NewLootBoxDtoWithDefaults instantiates a new LootBoxDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLootBoxDtoWithDefaults() *LootBoxDto {
	this := LootBoxDto{}
	return &this
}

// GetId returns the Id field value
func (o *LootBoxDto) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LootBoxDto) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LootBoxDto) SetId(v int32) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *LootBoxDto) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *LootBoxDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *LootBoxDto) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *LootBoxDto) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *LootBoxDto) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *LootBoxDto) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetIsOpen returns the IsOpen field value
func (o *LootBoxDto) GetIsOpen() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOpen
}

// GetIsOpenOk returns a tuple with the IsOpen field value
// and a boolean to check if the value has been set.
func (o *LootBoxDto) GetIsOpenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsOpen, true
}

// SetIsOpen sets field value
func (o *LootBoxDto) SetIsOpen(v bool) {
	o.IsOpen = v
}

// GetResult returns the Result field value
func (o *LootBoxDto) GetResult() CreatorPartialDto {
	if o == nil {
		var ret CreatorPartialDto
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *LootBoxDto) GetResultOk() (*CreatorPartialDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *LootBoxDto) SetResult(v CreatorPartialDto) {
	o.Result = v
}

// GetPlayer returns the Player field value
func (o *LootBoxDto) GetPlayer() PlayerPartialDto {
	if o == nil {
		var ret PlayerPartialDto
		return ret
	}

	return o.Player
}

// GetPlayerOk returns a tuple with the Player field value
// and a boolean to check if the value has been set.
func (o *LootBoxDto) GetPlayerOk() (*PlayerPartialDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Player, true
}

// SetPlayer sets field value
func (o *LootBoxDto) SetPlayer(v PlayerPartialDto) {
	o.Player = v
}

func (o LootBoxDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LootBoxDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["is_open"] = o.IsOpen
	toSerialize["result"] = o.Result
	toSerialize["player"] = o.Player
	return toSerialize, nil
}

func (o *LootBoxDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"is_open",
		"result",
		"player",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLootBoxDto := _LootBoxDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLootBoxDto)

	if err != nil {
		return err
	}

	*o = LootBoxDto(varLootBoxDto)

	return err
}

type NullableLootBoxDto struct {
	value *LootBoxDto
	isSet bool
}

func (v NullableLootBoxDto) Get() *LootBoxDto {
	return v.value
}

func (v *NullableLootBoxDto) Set(val *LootBoxDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLootBoxDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLootBoxDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLootBoxDto(val *LootBoxDto) *NullableLootBoxDto {
	return &NullableLootBoxDto{value: val, isSet: true}
}

func (v NullableLootBoxDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLootBoxDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


