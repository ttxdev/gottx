/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"fmt"
)

// Rarity the model 'Rarity'
type Rarity string

// List of Rarity
const (
	RARITY_PENNIES Rarity = "Pennies"
	RARITY_COMMON Rarity = "Common"
	RARITY_RARE Rarity = "Rare"
	RARITY_EPIC Rarity = "Epic"
)

// All allowed values of Rarity enum
var AllowedRarityEnumValues = []Rarity{
	"Pennies",
	"Common",
	"Rare",
	"Epic",
}

func (v *Rarity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Rarity(value)
	for _, existing := range AllowedRarityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Rarity", value)
}

// NewRarityFromValue returns a pointer to a valid Rarity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRarityFromValue(v string) (*Rarity, error) {
	ev := Rarity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Rarity: valid values are %v", v, AllowedRarityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Rarity) IsValid() bool {
	for _, existing := range AllowedRarityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Rarity value
func (v Rarity) Ptr() *Rarity {
	return &v
}

type NullableRarity struct {
	value *Rarity
	isSet bool
}

func (v NullableRarity) Get() *Rarity {
	return v.value
}

func (v *NullableRarity) Set(val *Rarity) {
	v.value = val
	v.isSet = true
}

func (v NullableRarity) IsSet() bool {
	return v.isSet
}

func (v *NullableRarity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRarity(val *Rarity) *NullableRarity {
	return &NullableRarity{value: val, isSet: true}
}

func (v NullableRarity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRarity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

