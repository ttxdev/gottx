/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the StreamStatusDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamStatusDto{}

// StreamStatusDto struct for StreamStatusDto
type StreamStatusDto struct {
	IsLive bool `json:"is_live"`
	StartedAt NullableTime `json:"started_at,omitempty"`
	EndedAt NullableTime `json:"ended_at,omitempty"`
}

type _StreamStatusDto StreamStatusDto

// NewStreamStatusDto instantiates a new StreamStatusDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamStatusDto(isLive bool) *StreamStatusDto {
	this := StreamStatusDto{}
	this.IsLive = isLive
	return &this
}

// NewStreamStatusDtoWithDefaults instantiates a new StreamStatusDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamStatusDtoWithDefaults() *StreamStatusDto {
	this := StreamStatusDto{}
	return &this
}

// GetIsLive returns the IsLive field value
func (o *StreamStatusDto) GetIsLive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsLive
}

// GetIsLiveOk returns a tuple with the IsLive field value
// and a boolean to check if the value has been set.
func (o *StreamStatusDto) GetIsLiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsLive, true
}

// SetIsLive sets field value
func (o *StreamStatusDto) SetIsLive(v bool) {
	o.IsLive = v
}

// GetStartedAt returns the StartedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StreamStatusDto) GetStartedAt() time.Time {
	if o == nil || IsNil(o.StartedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.StartedAt.Get()
}

// GetStartedAtOk returns a tuple with the StartedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StreamStatusDto) GetStartedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartedAt.Get(), o.StartedAt.IsSet()
}

// HasStartedAt returns a boolean if a field has been set.
func (o *StreamStatusDto) HasStartedAt() bool {
	if o != nil && o.StartedAt.IsSet() {
		return true
	}

	return false
}

// SetStartedAt gets a reference to the given NullableTime and assigns it to the StartedAt field.
func (o *StreamStatusDto) SetStartedAt(v time.Time) {
	o.StartedAt.Set(&v)
}
// SetStartedAtNil sets the value for StartedAt to be an explicit nil
func (o *StreamStatusDto) SetStartedAtNil() {
	o.StartedAt.Set(nil)
}

// UnsetStartedAt ensures that no value is present for StartedAt, not even an explicit nil
func (o *StreamStatusDto) UnsetStartedAt() {
	o.StartedAt.Unset()
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StreamStatusDto) GetEndedAt() time.Time {
	if o == nil || IsNil(o.EndedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt.Get()
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StreamStatusDto) GetEndedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndedAt.Get(), o.EndedAt.IsSet()
}

// HasEndedAt returns a boolean if a field has been set.
func (o *StreamStatusDto) HasEndedAt() bool {
	if o != nil && o.EndedAt.IsSet() {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given NullableTime and assigns it to the EndedAt field.
func (o *StreamStatusDto) SetEndedAt(v time.Time) {
	o.EndedAt.Set(&v)
}
// SetEndedAtNil sets the value for EndedAt to be an explicit nil
func (o *StreamStatusDto) SetEndedAtNil() {
	o.EndedAt.Set(nil)
}

// UnsetEndedAt ensures that no value is present for EndedAt, not even an explicit nil
func (o *StreamStatusDto) UnsetEndedAt() {
	o.EndedAt.Unset()
}

func (o StreamStatusDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamStatusDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_live"] = o.IsLive
	if o.StartedAt.IsSet() {
		toSerialize["started_at"] = o.StartedAt.Get()
	}
	if o.EndedAt.IsSet() {
		toSerialize["ended_at"] = o.EndedAt.Get()
	}
	return toSerialize, nil
}

func (o *StreamStatusDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_live",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStreamStatusDto := _StreamStatusDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStreamStatusDto)

	if err != nil {
		return err
	}

	*o = StreamStatusDto(varStreamStatusDto)

	return err
}

type NullableStreamStatusDto struct {
	value *StreamStatusDto
	isSet bool
}

func (v NullableStreamStatusDto) Get() *StreamStatusDto {
	return v.value
}

func (v *NullableStreamStatusDto) Set(val *StreamStatusDto) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamStatusDto) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamStatusDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamStatusDto(val *StreamStatusDto) *NullableStreamStatusDto {
	return &NullableStreamStatusDto{value: val, isSet: true}
}

func (v NullableStreamStatusDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamStatusDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


