/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"fmt"
)

// PlayerType the model 'PlayerType'
type PlayerType string

// List of PlayerType
const (
	PLAYERTYPE_USER PlayerType = "User"
	PLAYERTYPE_ADMIN PlayerType = "Admin"
)

// All allowed values of PlayerType enum
var AllowedPlayerTypeEnumValues = []PlayerType{
	"User",
	"Admin",
}

func (v *PlayerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlayerType(value)
	for _, existing := range AllowedPlayerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlayerType", value)
}

// NewPlayerTypeFromValue returns a pointer to a valid PlayerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlayerTypeFromValue(v string) (*PlayerType, error) {
	ev := PlayerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlayerType: valid values are %v", v, AllowedPlayerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlayerType) IsValid() bool {
	for _, existing := range AllowedPlayerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlayerType value
func (v PlayerType) Ptr() *PlayerType {
	return &v
}

type NullablePlayerType struct {
	value *PlayerType
	isSet bool
}

func (v NullablePlayerType) Get() *PlayerType {
	return v.value
}

func (v *NullablePlayerType) Set(val *PlayerType) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerType) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerType(val *PlayerType) *NullablePlayerType {
	return &NullablePlayerType{value: val, isSet: true}
}

func (v NullablePlayerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

