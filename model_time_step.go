/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"fmt"
)

// TimeStep the model 'TimeStep'
type TimeStep string

// List of TimeStep
const (
	MINUTE TimeStep = "Minute"
	FIVE_MINUTE TimeStep = "FiveMinute"
	FIFTEEN_MINUTE TimeStep = "FifteenMinute"
	THIRTY_MINUTE TimeStep = "ThirtyMinute"
	HOUR TimeStep = "Hour"
	DAY TimeStep = "Day"
	WEEK TimeStep = "Week"
	MONTH TimeStep = "Month"
)

// All allowed values of TimeStep enum
var AllowedTimeStepEnumValues = []TimeStep{
	"Minute",
	"FiveMinute",
	"FifteenMinute",
	"ThirtyMinute",
	"Hour",
	"Day",
	"Week",
	"Month",
}

func (v *TimeStep) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeStep(value)
	for _, existing := range AllowedTimeStepEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeStep", value)
}

// NewTimeStepFromValue returns a pointer to a valid TimeStep
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeStepFromValue(v string) (*TimeStep, error) {
	ev := TimeStep(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeStep: valid values are %v", v, AllowedTimeStepEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeStep) IsValid() bool {
	for _, existing := range AllowedTimeStepEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeStep value
func (v TimeStep) Ptr() *TimeStep {
	return &v
}

type NullableTimeStep struct {
	value *TimeStep
	isSet bool
}

func (v NullableTimeStep) Get() *TimeStep {
	return v.value
}

func (v *NullableTimeStep) Set(val *TimeStep) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeStep) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeStep(val *TimeStep) *NullableTimeStep {
	return &NullableTimeStep{value: val, isSet: true}
}

func (v NullableTimeStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

