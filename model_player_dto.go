/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PlayerDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerDto{}

// PlayerDto struct for PlayerDto
type PlayerDto struct {
	Id int32 `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Name string `json:"name"`
	Slug string `json:"slug"`
	TwitchId string `json:"twitch_id"`
	Url string `json:"url"`
	AvatarUrl string `json:"avatar_url"`
	Credits int64 `json:"credits"`
	Portfolio int64 `json:"portfolio"`
	Value int64 `json:"value"`
	Type PlayerType `json:"type"`
	Transactions []PlayerTransactionDto `json:"transactions"`
	LootBoxes []LootBoxDto `json:"loot_boxes"`
	Shares []PlayerShareDto `json:"shares"`
	History []PortfolioSnapshotDto `json:"history"`
}

type _PlayerDto PlayerDto

// NewPlayerDto instantiates a new PlayerDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerDto(id int32, createdAt time.Time, updatedAt time.Time, name string, slug string, twitchId string, url string, avatarUrl string, credits int64, portfolio int64, value int64, type_ PlayerType, transactions []PlayerTransactionDto, lootBoxes []LootBoxDto, shares []PlayerShareDto, history []PortfolioSnapshotDto) *PlayerDto {
	this := PlayerDto{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Name = name
	this.Slug = slug
	this.TwitchId = twitchId
	this.Url = url
	this.AvatarUrl = avatarUrl
	this.Credits = credits
	this.Portfolio = portfolio
	this.Value = value
	this.Type = type_
	this.Transactions = transactions
	this.LootBoxes = lootBoxes
	this.Shares = shares
	this.History = history
	return &this
}

// NewPlayerDtoWithDefaults instantiates a new PlayerDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerDtoWithDefaults() *PlayerDto {
	this := PlayerDto{}
	return &this
}

// GetId returns the Id field value
func (o *PlayerDto) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PlayerDto) SetId(v int32) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *PlayerDto) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *PlayerDto) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *PlayerDto) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *PlayerDto) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetName returns the Name field value
func (o *PlayerDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PlayerDto) SetName(v string) {
	o.Name = v
}

// GetSlug returns the Slug field value
func (o *PlayerDto) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *PlayerDto) SetSlug(v string) {
	o.Slug = v
}

// GetTwitchId returns the TwitchId field value
func (o *PlayerDto) GetTwitchId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TwitchId
}

// GetTwitchIdOk returns a tuple with the TwitchId field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetTwitchIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TwitchId, true
}

// SetTwitchId sets field value
func (o *PlayerDto) SetTwitchId(v string) {
	o.TwitchId = v
}

// GetUrl returns the Url field value
func (o *PlayerDto) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *PlayerDto) SetUrl(v string) {
	o.Url = v
}

// GetAvatarUrl returns the AvatarUrl field value
func (o *PlayerDto) GetAvatarUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// SetAvatarUrl sets field value
func (o *PlayerDto) SetAvatarUrl(v string) {
	o.AvatarUrl = v
}

// GetCredits returns the Credits field value
func (o *PlayerDto) GetCredits() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Credits
}

// GetCreditsOk returns a tuple with the Credits field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetCreditsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credits, true
}

// SetCredits sets field value
func (o *PlayerDto) SetCredits(v int64) {
	o.Credits = v
}

// GetPortfolio returns the Portfolio field value
func (o *PlayerDto) GetPortfolio() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Portfolio
}

// GetPortfolioOk returns a tuple with the Portfolio field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetPortfolioOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Portfolio, true
}

// SetPortfolio sets field value
func (o *PlayerDto) SetPortfolio(v int64) {
	o.Portfolio = v
}

// GetValue returns the Value field value
func (o *PlayerDto) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PlayerDto) SetValue(v int64) {
	o.Value = v
}

// GetType returns the Type field value
func (o *PlayerDto) GetType() PlayerType {
	if o == nil {
		var ret PlayerType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetTypeOk() (*PlayerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *PlayerDto) SetType(v PlayerType) {
	o.Type = v
}

// GetTransactions returns the Transactions field value
func (o *PlayerDto) GetTransactions() []PlayerTransactionDto {
	if o == nil {
		var ret []PlayerTransactionDto
		return ret
	}

	return o.Transactions
}

// GetTransactionsOk returns a tuple with the Transactions field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetTransactionsOk() ([]PlayerTransactionDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transactions, true
}

// SetTransactions sets field value
func (o *PlayerDto) SetTransactions(v []PlayerTransactionDto) {
	o.Transactions = v
}

// GetLootBoxes returns the LootBoxes field value
func (o *PlayerDto) GetLootBoxes() []LootBoxDto {
	if o == nil {
		var ret []LootBoxDto
		return ret
	}

	return o.LootBoxes
}

// GetLootBoxesOk returns a tuple with the LootBoxes field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetLootBoxesOk() ([]LootBoxDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.LootBoxes, true
}

// SetLootBoxes sets field value
func (o *PlayerDto) SetLootBoxes(v []LootBoxDto) {
	o.LootBoxes = v
}

// GetShares returns the Shares field value
func (o *PlayerDto) GetShares() []PlayerShareDto {
	if o == nil {
		var ret []PlayerShareDto
		return ret
	}

	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetSharesOk() ([]PlayerShareDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Shares, true
}

// SetShares sets field value
func (o *PlayerDto) SetShares(v []PlayerShareDto) {
	o.Shares = v
}

// GetHistory returns the History field value
func (o *PlayerDto) GetHistory() []PortfolioSnapshotDto {
	if o == nil {
		var ret []PortfolioSnapshotDto
		return ret
	}

	return o.History
}

// GetHistoryOk returns a tuple with the History field value
// and a boolean to check if the value has been set.
func (o *PlayerDto) GetHistoryOk() ([]PortfolioSnapshotDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.History, true
}

// SetHistory sets field value
func (o *PlayerDto) SetHistory(v []PortfolioSnapshotDto) {
	o.History = v
}

func (o PlayerDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["name"] = o.Name
	toSerialize["slug"] = o.Slug
	toSerialize["twitch_id"] = o.TwitchId
	toSerialize["url"] = o.Url
	toSerialize["avatar_url"] = o.AvatarUrl
	toSerialize["credits"] = o.Credits
	toSerialize["portfolio"] = o.Portfolio
	toSerialize["value"] = o.Value
	toSerialize["type"] = o.Type
	toSerialize["transactions"] = o.Transactions
	toSerialize["loot_boxes"] = o.LootBoxes
	toSerialize["shares"] = o.Shares
	toSerialize["history"] = o.History
	return toSerialize, nil
}

func (o *PlayerDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"name",
		"slug",
		"twitch_id",
		"url",
		"avatar_url",
		"credits",
		"portfolio",
		"value",
		"type",
		"transactions",
		"loot_boxes",
		"shares",
		"history",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlayerDto := _PlayerDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlayerDto)

	if err != nil {
		return err
	}

	*o = PlayerDto(varPlayerDto)

	return err
}

type NullablePlayerDto struct {
	value *PlayerDto
	isSet bool
}

func (v NullablePlayerDto) Get() *PlayerDto {
	return v.value
}

func (v *NullablePlayerDto) Set(val *PlayerDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerDto(val *PlayerDto) *NullablePlayerDto {
	return &NullablePlayerDto{value: val, isSet: true}
}

func (v NullablePlayerDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


