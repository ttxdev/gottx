/*
TTX.Api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gottx

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LootBoxResultDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LootBoxResultDto{}

// LootBoxResultDto struct for LootBoxResultDto
type LootBoxResultDto struct {
	LootboxId ModelId `json:"lootbox_id"`
	Player PlayerPartialDto `json:"player"`
	Result CreatorRarityDto `json:"result"`
	Rarities []CreatorRarityDto `json:"rarities"`
}

type _LootBoxResultDto LootBoxResultDto

// NewLootBoxResultDto instantiates a new LootBoxResultDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLootBoxResultDto(lootboxId ModelId, player PlayerPartialDto, result CreatorRarityDto, rarities []CreatorRarityDto) *LootBoxResultDto {
	this := LootBoxResultDto{}
	this.LootboxId = lootboxId
	this.Player = player
	this.Result = result
	this.Rarities = rarities
	return &this
}

// NewLootBoxResultDtoWithDefaults instantiates a new LootBoxResultDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLootBoxResultDtoWithDefaults() *LootBoxResultDto {
	this := LootBoxResultDto{}
	return &this
}

// GetLootboxId returns the LootboxId field value
func (o *LootBoxResultDto) GetLootboxId() ModelId {
	if o == nil {
		var ret ModelId
		return ret
	}

	return o.LootboxId
}

// GetLootboxIdOk returns a tuple with the LootboxId field value
// and a boolean to check if the value has been set.
func (o *LootBoxResultDto) GetLootboxIdOk() (*ModelId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LootboxId, true
}

// SetLootboxId sets field value
func (o *LootBoxResultDto) SetLootboxId(v ModelId) {
	o.LootboxId = v
}

// GetPlayer returns the Player field value
func (o *LootBoxResultDto) GetPlayer() PlayerPartialDto {
	if o == nil {
		var ret PlayerPartialDto
		return ret
	}

	return o.Player
}

// GetPlayerOk returns a tuple with the Player field value
// and a boolean to check if the value has been set.
func (o *LootBoxResultDto) GetPlayerOk() (*PlayerPartialDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Player, true
}

// SetPlayer sets field value
func (o *LootBoxResultDto) SetPlayer(v PlayerPartialDto) {
	o.Player = v
}

// GetResult returns the Result field value
func (o *LootBoxResultDto) GetResult() CreatorRarityDto {
	if o == nil {
		var ret CreatorRarityDto
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *LootBoxResultDto) GetResultOk() (*CreatorRarityDto, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *LootBoxResultDto) SetResult(v CreatorRarityDto) {
	o.Result = v
}

// GetRarities returns the Rarities field value
func (o *LootBoxResultDto) GetRarities() []CreatorRarityDto {
	if o == nil {
		var ret []CreatorRarityDto
		return ret
	}

	return o.Rarities
}

// GetRaritiesOk returns a tuple with the Rarities field value
// and a boolean to check if the value has been set.
func (o *LootBoxResultDto) GetRaritiesOk() ([]CreatorRarityDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rarities, true
}

// SetRarities sets field value
func (o *LootBoxResultDto) SetRarities(v []CreatorRarityDto) {
	o.Rarities = v
}

func (o LootBoxResultDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LootBoxResultDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lootbox_id"] = o.LootboxId
	toSerialize["player"] = o.Player
	toSerialize["result"] = o.Result
	toSerialize["rarities"] = o.Rarities
	return toSerialize, nil
}

func (o *LootBoxResultDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lootbox_id",
		"player",
		"result",
		"rarities",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLootBoxResultDto := _LootBoxResultDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLootBoxResultDto)

	if err != nil {
		return err
	}

	*o = LootBoxResultDto(varLootBoxResultDto)

	return err
}

type NullableLootBoxResultDto struct {
	value *LootBoxResultDto
	isSet bool
}

func (v NullableLootBoxResultDto) Get() *LootBoxResultDto {
	return v.value
}

func (v *NullableLootBoxResultDto) Set(val *LootBoxResultDto) {
	v.value = val
	v.isSet = true
}

func (v NullableLootBoxResultDto) IsSet() bool {
	return v.isSet
}

func (v *NullableLootBoxResultDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLootBoxResultDto(val *LootBoxResultDto) *NullableLootBoxResultDto {
	return &NullableLootBoxResultDto{value: val, isSet: true}
}

func (v NullableLootBoxResultDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLootBoxResultDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


